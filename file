const ECTracker = () => {
  const [activities, setActivities] = useState(appData.activities);
  const [showForm, setShowForm] = useState(false);
  const [editingActivity, setEditingActivity] = useState(null);
  const [selectedActivity, setSelectedActivity] = useState(null);
  const [showJournalForm, setShowJournalForm] = useState(false);
  const [editingJournal, setEditingJournal] = useState(null);
  const [formData, setFormData] = useState({
    type: 'Volunteering',
    organization: '',
    hours: '',
    description: '',
    tags: []
  });
  const [journalFormData, setJournalFormData] = useState({
    title: '',
    content: '',
    date: new Date().toISOString().split('T')[0]
  });

  const activityTypes = ['Volunteering', 'Research', 'Shadowing', 'Leadership', 'Clinical', 'Teaching', 'Other'];
  const commonTags = ['Clinical', 'Research', 'Patient Care', 'Lab Work', 'Observation', 'Leadership', 'Teaching', 'Community Service'];

  const handleSubmit = (e) => {
    e.preventDefault();
    const newActivity = {
      ...formData,
      id: editingActivity ? editingActivity.id : Date.now(),
      hours: parseInt(formData.hours),
      journalEntries: editingActivity ? editingActivity.journalEntries : []
    };

    let updatedActivities;
    if (editingActivity) {
      updatedActivities = activities.map(activity => activity.id === editingActivity.id ? newActivity : activity);
    } else {
      updatedActivities = [...activities, newActivity];
    }

    setActivities(updatedActivities);
    appData.activities = updatedActivities;
    setShowForm(false);
    setEditingActivity(null);
    setFormData({ type: 'Volunteering', organization: '', hours: '', description: '', tags: [] });
  };

  const handleEdit = (activity) => {
    setEditingActivity(activity);
    setFormData(activity);
    setShowForm(true);
  };

  const handleDelete = (activityId) => {
    const updatedActivities = activities.filter(activity => activity.id !== activityId);
    setActivities(updatedActivities);
    appData.activities = updatedActivities;
    if (selectedActivity && selectedActivity.id === activityId) {
      setSelectedActivity(null);
    }
  };

  const toggleTag = (tag) => {
    const newTags = formData.tags.includes(tag)
      ? formData.tags.filter(t => t !== tag)
      : [...formData.tags, tag];
    setFormData({ ...formData, tags: newTags });
  };

  const handleJournalSubmit = (e) => {
    e.preventDefault();
    const newEntry = {
      ...journalFormData,
      id: editingJournal ? editingJournal.id : Date.now()
    };

    const updatedActivities = activities.map(activity => {
      if (activity.id === selectedActivity.id) {
        let updatedEntries;
        if (editingJournal) {
          updatedEntries = activity.journalEntries.map(entry => 
            entry.id === editingJournal.id ? newEntry : entry
          );
        } else {
          updatedEntries = [...(activity.journalEntries || []), newEntry];
        }
        return { ...activity, journalEntries: updatedEntries };
      }
      return activity;
    });

    setActivities(updatedActivities);
    appData.activities = updatedActivities;
    setSelectedActivity(updatedActivities.find(a => a.id === selectedActivity.id));
    setShowJournalForm(false);
    setEditingJournal(null);
    setJournalFormData({ title: '', content: '', date: new Date().toISOString().split('T')[0] });
  };

  const handleJournalEdit = (entry) => {
    setEditingJournal(entry);
    setJournalFormData(entry);
    setShowJournalForm(true);
  };

  const handleJournalDelete = (entryId) => {
    const updatedActivities = activities.map(activity => {
      if (activity.id === selectedActivity.id) {
        return {
          ...activity,
          journalEntries: activity.journalEntries.filter(entry => entry.id !== entryId)
        };
      }
      return activity;
    });

    setActivities(updatedActivities);
    appData.activities = updatedActivities;
    setSelectedActivity(updatedActivities.find(a => a.id === selectedActivity.id));
  };

  const totalHours = activities.reduce((sum, activity) => sum + activity.hours, 0);

  if (selectedActivity) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <button
            onClick={() => setSelectedActivity(null)}
            className="text-indigo-600 hover:text-indigo-800 flex items-center"
          >
            ← Back to Activities
          </button>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex justify-between items-start mb-4">
            <div>
              <h2 className="text-2xl font-bold text-gray-800">{selectedActivity.organization}</h2>
              <p className="text-gray-600">{selectedActivity.type} • {selectedActivity.hours} hours</p>
              <p className="text-gray-700 mt-2">{selectedActivity.description}</p>
              <div className="flex flex-wrap gap-1 mt-2">
                {selectedActivity.tags.map(tag => (
                  <span key={tag} className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <div className="border-t pt-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Journal Entries</h3>
              <button
                onClick={() => setShowJournalForm(true)}
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center"
              >
                <Plus className="w-4 h-4 mr-2" />
                Add Entry
              </button>
            </div>

            {showJournalForm && (
              <div className="bg-gray-50 p-4 rounded-lg mb-4">
                <h4 className="font-medium text-gray-800 mb-3">
                  {editingJournal ? 'Edit Journal Entry' : 'New Journal Entry'}
                </h4>
                <form onSubmit={handleJournalSubmit} className="space-y-3">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <input
                      type="text"
                      placeholder="Entry Title"
                      value={journalFormData.title}
                      onChange={(e) => setJournalFormData({ ...journalFormData, title: e.target.value })}
                      className="md:col-span-2 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                      required
                    />
                    <input
                      type="date"
                      value={journalFormData.date}
                      onChange={(e) => setJournalFormData({ ...journalFormData, date: e.target.value })}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                      required
                    />
                  </div>
                  <textarea
                    placeholder="Write about your experience..."
                    value={journalFormData.content}
                    onChange={(e) => setJournalFormData({ ...journalFormData, content: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent h-32 resize-none"
                    required
                  />
                  <div className="flex space-x-2">
                    <button
                      type="submit"
                      className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
                    >
                      {editingJournal ? 'Update Entry' : 'Save Entry'}
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setShowJournalForm(false);
                        setEditingJournal(null);
                        setJournalFormData({ title: '', content: '', date: new Date().toISOString().split('T')[0] });
                      }}
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            )}

            <div className="space-y-4">
              {(selectedActivity.journalEntries || []).sort((a, b) => new Date(b.date) - new Date(a.date)).map((entry) => (
                <div key={entry.id} className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h4 className="font-medium text-gray-800">{entry.title}</h4>
                      <p className="text-sm text-gray-600">{new Date(entry.date).toLocaleDateString()}</p>
                    </div>
                    <div className="flex space-x-1">
                      <button
                        onClick={() => handleJournalEdit(entry)}
                        className="text-indigo-600 hover:text-indigo-800"
                      >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleJournalDelete(entry.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  <p className="text-gray-700">{entry.content}</p>
                </div>
              ))}
              
              {(!selectedActivity.journalEntries || selectedActivity.journalEntries.length === 0) && (
                <div className="text-center py-8 text-gray-500">
                  No journal entries yet. Click "Add Entry" to start reflecting on this experience!
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Extracurricular Tracker</h2>
          <p className="text-gray-600">Track your experiences and add journal entries for each</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Total Hours</p>
          <p className="text-3xl font-bold text-indigo-600">{totalHours}</p>
        </div>
      </div>

      <button
        onClick={() => setShowForm(true)}
        className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center"
      >
        <Plus className="w-4 h-4 mr-2" />
        Add Activity
      </button>

      {showForm && (
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {editingActivity ? 'Edit Activity' : 'Add New Activity'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <select
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              >
                {activityTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              <input
                type="text"
                placeholder="Organization"
                value={formData.organization}
                onChange={(e) => setFormData({ ...formData, organization: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              />
            </div>
            <input
              type="number"
              placeholder="Hours"
              value={formData.hours}
              onChange={(e) => setFormData({ ...formData, hours: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              min="0"
              required
            />
            <textarea
              placeholder="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent h-24 resize-none"
              required
            />
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">Tags</p>
              <div className="flex flex-wrap gap-2">
                {commonTags.map(tag => (
                  <button
                    key={tag}
                    type="button"
                    onClick={() => toggleTag(tag)}
                    className={`px-3 py-1 rounded-full text-sm transition-colors ${
                      formData.tags.includes(tag)
                        ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
            <div className="flex space-x-2">
              <button
                type="submit"
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
              >
                {editingActivity ? 'Update Activity' : 'Add Activity'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowForm(false);
                  setEditingActivity(null);
                  setFormData({ type: 'Volunteering', organization: '', hours: '', description: '', tags: [] });
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {activities.map((activity) => (
          <div key={activity.id} className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h3 className="font-semibold text-gray-800">{activity.type}</h3>
                <p className="text-sm text-gray-600">{activity.organization}</p>
              </div>
              <div className="flex space-x-1">
                <button
                  onClick={() => handleEdit(activity)}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  <Edit2 className="w-4 h-4" />
                </button>
                <button
                  onClick={() => handleDelete(activity.id)}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
            <p className="text-gray-700 mb-3">{activity.description}</p>
            <div className="flex items-center justify-between mb-3">
              <span className="text-lg font-bold text-indigo-600">{activity.hours} hours</span>
              <span className="text-sm text-gray-500">
                {(activity.journalEntries || []).length} journal entries
              </span>
            </div>
            <div className="flex flex-wrap gap-1 mb-3">
              {activity.tags.map(tag => (
                <span
                  key={tag}
                  className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full"
                >
                  {tag}
                </span>
              ))}
            </div>
            <button
              onClick={() => setSelectedActivity(activity)}
              className="w-full bg-indigo-50 text-indigo-700 py-2 rounded-lg hover:bg-indigo-100 transition-colors font-medium"
            >
              View Journal →
            </button>
          </div>
        ))}
      </div>
      
      {activities.length === 0 && (
        <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-200 text-center text-gray-500">
          No activities added yet. Click "Add Activity" to get started!
        </div>
      )}
    </div>
  );
};import React, { useState, useEffect } from 'react';
import { 
  User, 
  Book, 
  Target, 
  Clock, 
  FileText, 
  Calendar,
  Home,
  LogOut,
  Plus,
  Edit2,
  Trash2,
  CheckCircle,
  AlertCircle,
  BookOpen,
  Activity,
  Users,
  Award,
  TrendingUp
} from 'lucide-react';

// Updated data structure to include journal entries for each activity
let appData = {
  user: null,
  courses: [
    { id: 1, name: 'Biology I', grade: 'A', credits: 4, semester: 'Fall 2023' },
    { id: 2, name: 'Chemistry I', grade: 'A-', credits: 4, semester: 'Fall 2023' },
    { id: 3, name: 'Calculus I', grade: 'B+', credits: 3, semester: 'Spring 2024' }
  ],
  activities: [
    { 
      id: 1, 
      type: 'Volunteering', 
      organization: 'Local Hospital', 
      hours: 120, 
      description: 'Patient care assistant', 
      tags: ['Clinical', 'Patient Care'],
      journalEntries: [
        { id: 101, title: 'First Day at Hospital', content: 'Today was my first day volunteering. I was nervous but the staff was welcoming...', date: '2024-06-15' },
        { id: 102, title: 'Patient Interaction', content: 'Had a meaningful conversation with an elderly patient today...', date: '2024-07-10' }
      ]
    },
    { 
      id: 2, 
      type: 'Research', 
      organization: 'University Lab', 
      hours: 200, 
      description: 'Cancer research project', 
      tags: ['Research', 'Lab Work'],
      journalEntries: [
        { id: 201, title: 'Research Breakthrough', content: 'We discovered something interesting in our cell culture experiments...', date: '2024-07-20' }
      ]
    }
  ],
  applications: [
    { id: 1, school: 'Harvard Medical School', status: 'Submitted', mcatScore: 520, interviewDate: '2024-10-15', notes: 'Strong research fit' },
    { id: 2, school: 'Johns Hopkins SOM', status: 'In Review', mcatScore: 520, interviewDate: null, notes: 'Great clinical programs' }
  ],
  journal: [
    { id: 1, title: 'First Day Volunteering', content: 'Today was my first day volunteering at the hospital. I was nervous but excited to finally get hands-on clinical experience...', date: '2024-08-01' }
  ],
  timeline: [
    { id: 1, title: 'MCAT Exam', date: '2024-09-15', description: 'Official MCAT test day', completed: false },
    { id: 2, title: 'AMCAS Submission', date: '2024-06-01', description: 'Submit primary applications', completed: true }
  ]
};

const PremedHQ = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentPage, setCurrentPage] = useState('dashboard');
  const [user, setUser] = useState(null);

  const handleLogin = (email, password) => {
    if (email === 'student@premedHQ.com' && password === 'premed123') {
      const userData = { email, name: 'Alex Chen' };
      setUser(userData);
      setIsAuthenticated(true);
      appData.user = userData;
      return true;
    }
    return false;
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setUser(null);
    appData.user = null;
    setCurrentPage('dashboard');
  };

  if (!isAuthenticated) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar currentPage={currentPage} setCurrentPage={setCurrentPage} onLogout={handleLogout} />
      <main className="flex-1 overflow-y-auto">
        <Header user={user} />
        <div className="p-6">
          <PageContent currentPage={currentPage} />
        </div>
      </main>
    </div>
  );
};

const LoginPage = ({ onLogin }) => {
  const [email, setEmail] = useState('student@premedHQ.com');
  const [password, setPassword] = useState('premed123');
  const [error, setError] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    setError('');
    
    console.log('Login attempt:', email, password); // Debug log
    
    if (!email || !password) {
      setError('Please fill in all fields');
      return;
    }
    
    if (!email.includes('@')) {
      setError('Please enter a valid email');
      return;
    }
    
    const loginResult = onLogin(email, password);
    console.log('Login result:', loginResult); // Debug log
    
    if (!loginResult) {
      setError('Invalid credentials. Try: student@premedHQ.com / premed123');
    }
  };

  const handleDirectLogin = () => {
    console.log('Direct login clicked'); // Debug log
    onLogin('student@premedHQ.com', 'premed123');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
        <div className="text-center mb-8">
          <div className="bg-indigo-600 w-16 h-16 rounded-xl flex items-center justify-center mx-auto mb-4">
            <BookOpen className="text-white w-8 h-8" />
          </div>
          <h1 className="text-3xl font-bold text-gray-800">PremedHQ</h1>
          <p className="text-gray-600 mt-2">Your journey to medical school starts here</p>
        </div>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
              {error}
            </div>
          )}
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-colors"
              placeholder="Enter your email"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-colors"
              placeholder="Enter your password"
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
          >
            Sign In
          </button>
          
          <button
            type="button"
            onClick={handleDirectLogin}
            className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-medium"
          >
            Quick Demo Login
          </button>
        </form>
        
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <p className="text-sm text-gray-600">Demo credentials:</p>
          <p className="text-sm font-mono text-gray-800">student@premedHQ.com</p>
          <p className="text-sm font-mono text-gray-800">premed123</p>
        </div>
      </div>
    </div>
  );
};

const Sidebar = ({ currentPage, setCurrentPage, onLogout }) => {
  const menuItems = [
    { id: 'dashboard', label: 'Dashboard', icon: Home },
    { id: 'gpa', label: 'GPA Tracker', icon: BookOpen },
    { id: 'activities', label: 'EC Tracker', icon: Users },
    { id: 'applications', label: 'Applications', icon: FileText },
    { id: 'journal', label: 'Journal', icon: Edit2 },
    { id: 'timeline', label: 'Timeline', icon: Calendar }
  ];

  return (
    <div className="bg-white w-64 shadow-lg">
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center">
          <div className="bg-indigo-600 w-10 h-10 rounded-lg flex items-center justify-center mr-3">
            <BookOpen className="text-white w-6 h-6" />
          </div>
          <h2 className="text-xl font-bold text-gray-800">PremedHQ</h2>
        </div>
      </div>
      
      <nav className="p-4">
        <ul className="space-y-2">
          {menuItems.map((item) => {
            const Icon = item.icon;
            return (
              <li key={item.id}>
                <button
                  onClick={() => setCurrentPage(item.id)}
                  className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${
                    currentPage === item.id
                      ? 'bg-indigo-50 text-indigo-700'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-800'
                  }`}
                >
                  <Icon className="w-5 h-5 mr-3" />
                  {item.label}
                </button>
              </li>
            );
          })}
        </ul>
        
        <button
          onClick={onLogout}
          className="w-full flex items-center px-4 py-3 text-left rounded-lg text-gray-600 hover:bg-gray-50 hover:text-gray-800 transition-colors mt-8 border-t border-gray-200 pt-4"
        >
          <LogOut className="w-5 h-5 mr-3" />
          Logout
        </button>
      </nav>
    </div>
  );
};

const Header = ({ user }) => {
  return (
    <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-800">Welcome back, {user?.name}!</h1>
        <div className="flex items-center">
          <div className="bg-indigo-100 w-10 h-10 rounded-full flex items-center justify-center">
            <User className="w-6 h-6 text-indigo-600" />
          </div>
        </div>
      </div>
    </div>
  );
};

const PageContent = ({ currentPage }) => {
  switch (currentPage) {
    case 'dashboard':
      return <Dashboard />;
    case 'gpa':
      return <GPATracker />;
    case 'activities':
      return <ECTracker />;
    case 'applications':
      return <ApplicationTracker />;
    case 'journal':
      return <Journal />;
    case 'timeline':
      return <TimelinePlanner />;
    default:
      return <Dashboard />;
  }
};

const Dashboard = () => {
  // Calculate GPA
  const calculateGPA = () => {
    const gradePoints = { 'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7, 'C+': 2.3, 'C': 2.0, 'C-': 1.7, 'D': 1.0, 'F': 0.0 };
    const totalCredits = appData.courses.reduce((sum, course) => sum + course.credits, 0);
    const totalPoints = appData.courses.reduce((sum, course) => sum + (gradePoints[course.grade] || 0) * course.credits, 0);
    return totalCredits > 0 ? (totalPoints / totalCredits).toFixed(2) : '0.00';
  };
  
  const totalECHours = appData.activities.reduce((sum, activity) => sum + activity.hours, 0);
  const recentJournal = appData.journal.length > 0 ? appData.journal[appData.journal.length - 1] : null;
  
  // MCAT countdown
  const mcatDate = new Date('2024-09-15');
  const today = new Date();
  const daysUntilMCAT = Math.ceil((mcatDate - today) / (1000 * 60 * 60 * 24));

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <div className="bg-green-500 w-12 h-12 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-6 h-6 text-white" />
            </div>
          </div>
          <h3 className="text-2xl font-bold text-gray-800 mb-1">{calculateGPA()}</h3>
          <p className="text-gray-600 font-medium">Current GPA</p>
          <p className="text-sm text-gray-500">Based on completed courses</p>
        </div>
        
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <div className="bg-blue-500 w-12 h-12 rounded-lg flex items-center justify-center">
              <Clock className="w-6 h-6 text-white" />
            </div>
          </div>
          <h3 className="text-2xl font-bold text-gray-800 mb-1">{daysUntilMCAT} days</h3>
          <p className="text-gray-600 font-medium">MCAT Countdown</p>
          <p className="text-sm text-gray-500">Until test date</p>
        </div>
        
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <div className="bg-purple-500 w-12 h-12 rounded-lg flex items-center justify-center">
              <Activity className="w-6 h-6 text-white" />
            </div>
          </div>
          <h3 className="text-2xl font-bold text-gray-800 mb-1">{totalECHours}</h3>
          <p className="text-gray-600 font-medium">EC Hours</p>
          <p className="text-sm text-gray-500">Total logged hours</p>
        </div>
        
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <div className="bg-orange-500 w-12 h-12 rounded-lg flex items-center justify-center">
              <FileText className="w-6 h-6 text-white" />
            </div>
          </div>
          <h3 className="text-2xl font-bold text-gray-800 mb-1">{appData.applications.length}</h3>
          <p className="text-gray-600 font-medium">Applications</p>
          <p className="text-sm text-gray-500">Schools applied to</p>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Recent Courses</h3>
          <div className="space-y-3">
            {appData.courses.slice(-3).map((course) => (
              <div key={course.id} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-800">{course.name}</p>
                  <p className="text-sm text-gray-600">{course.semester}</p>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-gray-800">{course.grade}</p>
                  <p className="text-sm text-gray-600">{course.credits} credits</p>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Latest Journal Entry</h3>
          {recentJournal ? (
            <div>
              <h4 className="font-medium text-gray-800 mb-2">{recentJournal.title}</h4>
              <p className="text-gray-600 mb-3">
                {recentJournal.content.substring(0, 150)}...
              </p>
              <p className="text-sm text-gray-500">{new Date(recentJournal.date).toLocaleDateString()}</p>
            </div>
          ) : (
            <p className="text-gray-500">No journal entries yet. Start reflecting on your journey!</p>
          )}
        </div>
      </div>
    </div>
  );
};

const GPATracker = () => {
  const [courses, setCourses] = useState(appData.courses);
  const [showForm, setShowForm] = useState(false);
  const [editingCourse, setEditingCourse] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    grade: 'A',
    credits: 3,
    semester: ''
  });

  const gradeOptions = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F'];
  const gradePoints = { 'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7, 'C+': 2.3, 'C': 2.0, 'C-': 1.7, 'D': 1.0, 'F': 0.0 };

  const calculateGPA = () => {
    const totalCredits = courses.reduce((sum, course) => sum + course.credits, 0);
    const totalPoints = courses.reduce((sum, course) => sum + (gradePoints[course.grade] || 0) * course.credits, 0);
    return totalCredits > 0 ? (totalPoints / totalCredits).toFixed(2) : '0.00';
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newCourse = {
      ...formData,
      id: editingCourse ? editingCourse.id : Date.now(),
      credits: parseInt(formData.credits)
    };

    let updatedCourses;
    if (editingCourse) {
      updatedCourses = courses.map(course => course.id === editingCourse.id ? newCourse : course);
    } else {
      updatedCourses = [...courses, newCourse];
    }

    setCourses(updatedCourses);
    appData.courses = updatedCourses;
    setShowForm(false);
    setEditingCourse(null);
    setFormData({ name: '', grade: 'A', credits: 3, semester: '' });
  };

  const handleEdit = (course) => {
    setEditingCourse(course);
    setFormData(course);
    setShowForm(true);
  };

  const handleDelete = (courseId) => {
    const updatedCourses = courses.filter(course => course.id !== courseId);
    setCourses(updatedCourses);
    appData.courses = updatedCourses;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">GPA Tracker</h2>
          <p className="text-gray-600">Track your courses and monitor your GPA</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Current GPA</p>
          <p className="text-3xl font-bold text-indigo-600">{calculateGPA()}</p>
        </div>
      </div>

      <button
        onClick={() => setShowForm(true)}
        className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center"
      >
        <Plus className="w-4 h-4 mr-2" />
        Add Course
      </button>

      {showForm && (
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {editingCourse ? 'Edit Course' : 'Add New Course'}
          </h3>
          <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <input
              type="text"
              placeholder="Course Name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              required
            />
            <select
              value={formData.grade}
              onChange={(e) => setFormData({ ...formData, grade: e.target.value })}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            >
              {gradeOptions.map(grade => (
                <option key={grade} value={grade}>{grade}</option>
              ))}
            </select>
            <input
              type="number"
              placeholder="Credits"
              value={formData.credits}
              onChange={(e) => setFormData({ ...formData, credits: e.target.value })}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              min="1"
              max="6"
              required
            />
            <input
              type="text"
              placeholder="Semester (e.g., Fall 2024)"
              value={formData.semester}
              onChange={(e) => setFormData({ ...formData, semester: e.target.value })}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              required
            />
            <div className="md:col-span-4 flex space-x-2">
              <button
                type="submit"
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
              >
                {editingCourse ? 'Update Course' : 'Add Course'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowForm(false);
                  setEditingCourse(null);
                  setFormData({ name: '', grade: 'A', credits: 3, semester: '' });
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="text-left p-4 font-semibold text-gray-800">Course Name</th>
                <th className="text-left p-4 font-semibold text-gray-800">Grade</th>
                <th className="text-left p-4 font-semibold text-gray-800">Credits</th>
                <th className="text-left p-4 font-semibold text-gray-800">Semester</th>
                <th className="text-left p-4 font-semibold text-gray-800">Points</th>
                <th className="text-left p-4 font-semibold text-gray-800">Actions</th>
              </tr>
            </thead>
            <tbody>
              {courses.map((course) => (
                <tr key={course.id} className="border-t border-gray-200">
                  <td className="p-4 text-gray-800">{course.name}</td>
                  <td className="p-4 text-gray-800">{course.grade}</td>
                  <td className="p-4 text-gray-800">{course.credits}</td>
                  <td className="p-4 text-gray-600">{course.semester}</td>
                  <td className="p-4 text-gray-800">{(gradePoints[course.grade] * course.credits).toFixed(1)}</td>
                  <td className="p-4">
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleEdit(course)}
                        className="text-indigo-600 hover:text-indigo-800"
                      >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDelete(course.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {courses.length === 0 && (
          <div className="p-8 text-center text-gray-500">
            No courses added yet. Click "Add Course" to get started!
          </div>
        )}
      </div>
    </div>
  );
};



const ApplicationTracker = () => {
  const [applications, setApplications] = useState(appData.applications);
  const [showForm, setShowForm] = useState(false);
  const [editingApplication, setEditingApplication] = useState(null);
  const [formData, setFormData] = useState({
    school: '',
    status: 'Not Started',
    mcatScore: '',
    interviewDate: '',
    notes: ''
  });

  const statusOptions = ['Not Started', 'In Progress', 'Submitted', 'In Review', 'Interview Scheduled', 'Accepted', 'Waitlisted', 'Rejected'];
  
  const getStatusColor = (status) => {
    const colors = {
      'Not Started': 'bg-gray-100 text-gray-700',
      'In Progress': 'bg-blue-100 text-blue-700',
      'Submitted': 'bg-yellow-100 text-yellow-700',
      'In Review': 'bg-orange-100 text-orange-700',
      'Interview Scheduled': 'bg-purple-100 text-purple-700',
      'Accepted': 'bg-green-100 text-green-700',
      'Waitlisted': 'bg-indigo-100 text-indigo-700',
      'Rejected': 'bg-red-100 text-red-700'
    };
    return colors[status] || 'bg-gray-100 text-gray-700';
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newApplication = {
      ...formData,
      id: editingApplication ? editingApplication.id : Date.now(),
      mcatScore: formData.mcatScore ? parseInt(formData.mcatScore) : null,
      interviewDate: formData.interviewDate || null
    };

    let updatedApplications;
    if (editingApplication) {
      updatedApplications = applications.map(app => app.id === editingApplication.id ? newApplication : app);
    } else {
      updatedApplications = [...applications, newApplication];
    }

    setApplications(updatedApplications);
    appData.applications = updatedApplications;
    setShowForm(false);
    setEditingApplication(null);
    setFormData({ school: '', status: 'Not Started', mcatScore: '', interviewDate: '', notes: '' });
  };

  const handleEdit = (application) => {
    setEditingApplication(application);
    setFormData({
      ...application,
      mcatScore: application.mcatScore || '',
      interviewDate: application.interviewDate || ''
    });
    setShowForm(true);
  };

  const handleDelete = (applicationId) => {
    const updatedApplications = applications.filter(app => app.id !== applicationId);
    setApplications(updatedApplications);
    appData.applications = updatedApplications;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Application Tracker</h2>
          <p className="text-gray-600">Track your medical school applications</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Total Applications</p>
          <p className="text-3xl font-bold text-indigo-600">{applications.length}</p>
        </div>
      </div>

      <button
        onClick={() => setShowForm(true)}
        className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center"
      >
        <Plus className="w-4 h-4 mr-2" />
        Add Application
      </button>

      {showForm && (
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {editingApplication ? 'Edit Application' : 'Add New Application'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="text"
                placeholder="Medical School Name"
                value={formData.school}
                onChange={(e) => setFormData({ ...formData, school: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              />
              <select
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              >
                {statusOptions.map(status => (
                  <option key={status} value={status}>{status}</option>
                ))}
              </select>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="number"
                placeholder="MCAT Score (optional)"
                value={formData.mcatScore}
                onChange={(e) => setFormData({ ...formData, mcatScore: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                min="472"
                max="528"
              />
              <input
                type="date"
                placeholder="Interview Date"
                value={formData.interviewDate}
                onChange={(e) => setFormData({ ...formData, interviewDate: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <textarea
              placeholder="Notes"
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent h-24 resize-none"
            />
            <div className="flex space-x-2">
              <button
                type="submit"
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
              >
                {editingApplication ? 'Update Application' : 'Add Application'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowForm(false);
                  setEditingApplication(null);
                  setFormData({ school: '', status: 'Not Started', mcatScore: '', interviewDate: '', notes: '' });
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="text-left p-4 font-semibold text-gray-800">School</th>
                <th className="text-left p-4 font-semibold text-gray-800">Status</th>
                <th className="text-left p-4 font-semibold text-gray-800">MCAT Score</th>
                <th className="text-left p-4 font-semibold text-gray-800">Interview Date</th>
                <th className="text-left p-4 font-semibold text-gray-800">Notes</th>
                <th className="text-left p-4 font-semibold text-gray-800">Actions</th>
              </tr>
            </thead>
            <tbody>
              {applications.map((application) => (
                <tr key={application.id} className="border-t border-gray-200">
                  <td className="p-4 text-gray-800 font-medium">{application.school}</td>
                  <td className="p-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>
                      {application.status}
                    </span>
                  </td>
                  <td className="p-4 text-gray-800">{application.mcatScore || 'N/A'}</td>
                  <td className="p-4 text-gray-800">
                    {application.interviewDate ? new Date(application.interviewDate).toLocaleDateString() : 'N/A'}
                  </td>
                  <td className="p-4 text-gray-600 max-w-xs truncate">{application.notes}</td>
                  <td className="p-4">
                    <div className="flex space-x-2">
                      <button
                        onClick={() => handleEdit(application)}
                        className="text-indigo-600 hover:text-indigo-800"
                      >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDelete(application.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {applications.length === 0 && (
          <div className="p-8 text-center text-gray-500">
            No applications added yet. Click "Add Application" to get started!
          </div>
        )}
      </div>
    </div>
  );
};

const Journal = () => {
  // Gather all journal entries from activities plus standalone journal entries
  const getAllJournalEntries = () => {
    const activityEntries = appData.activities.flatMap(activity => 
      (activity.journalEntries || []).map(entry => ({
        ...entry,
        activityName: activity.organization,
        activityType: activity.type,
        source: 'activity'
      }))
    );
    
    const standaloneEntries = appData.journal.map(entry => ({
      ...entry,
      source: 'standalone'
    }));
    
    return [...activityEntries, ...standaloneEntries].sort((a, b) => new Date(b.date) - new Date(a.date));
  };

  const [allEntries, setAllEntries] = useState(getAllJournalEntries());
  const [showForm, setShowForm] = useState(false);
  const [editingEntry, setEditingEntry] = useState(null);
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    date: new Date().toISOString().split('T')[0]
  });

  // Refresh entries when component mounts or data changes
  React.useEffect(() => {
    setAllEntries(getAllJournalEntries());
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    const newEntry = {
      ...formData,
      id: editingEntry ? editingEntry.id : Date.now()
    };

    let updatedJournal;
    if (editingEntry) {
      updatedJournal = appData.journal.map(entry => entry.id === editingEntry.id ? newEntry : entry);
    } else {
      updatedJournal = [...appData.journal, newEntry];
    }

    appData.journal = updatedJournal;
    setAllEntries(getAllJournalEntries());
    setShowForm(false);
    setEditingEntry(null);
    setFormData({ title: '', content: '', date: new Date().toISOString().split('T')[0] });
  };

  const handleEdit = (entry) => {
    if (entry.source === 'standalone') {
      setEditingEntry(entry);
      setFormData({
        title: entry.title,
        content: entry.content,
        date: entry.date
      });
      setShowForm(true);
    }
  };

  const handleDelete = (entry) => {
    if (entry.source === 'standalone') {
      const updatedJournal = appData.journal.filter(j => j.id !== entry.id);
      appData.journal = updatedJournal;
      setAllEntries(getAllJournalEntries());
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Journal</h2>
          <p className="text-gray-600">All your reflections and experiences in one place</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Total Entries</p>
          <p className="text-3xl font-bold text-indigo-600">{allEntries.length}</p>
        </div>
      </div>

      <button
        onClick={() => setShowForm(true)}
        className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center"
      >
        <Plus className="w-4 h-4 mr-2" />
        New General Entry
      </button>

      {showForm && (
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {editingEntry ? 'Edit Entry' : 'New General Journal Entry'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <input
                type="text"
                placeholder="Entry Title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="md:col-span-2 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              />
              <input
                type="date"
                value={formData.date}
                onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                required
              />
            </div>
            <textarea
              placeholder="Write your thoughts here..."
              value={formData.content}
              onChange={(e) => setFormData({ ...formData, content: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent h-40 resize-none"
              required
            />
            <div className="flex space-x-2">
              <button
                type="submit"
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
              >
                {editingEntry ? 'Update Entry' : 'Save Entry'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowForm(false);
                  setEditingEntry(null);
                  setFormData({ title: '', content: '', date: new Date().toISOString().split('T')[0] });
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="space-y-4">
        {allEntries.map((entry) => (
          <div key={`${entry.source}-${entry.id}`} className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex justify-between items-start mb-3">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h3 className="font-semibold text-gray-800">{entry.title}</h3>
                  {entry.source === 'activity' && (
                    <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                      {entry.activityName}
                    </span>
                  )}
                  {entry.source === 'standalone' && (
                    <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                      General
                    </span>
                  )}
                </div>
                <p className="text-gray-600 text-sm">{new Date(entry.date).toLocaleDateString()}</p>
              </div>
              {entry.source === 'standalone' && (
                <div className="flex space-x-1">
                  <button
                    onClick={() => handleEdit(entry)}
                    className="text-indigo-600 hover:text-indigo-800"
                  >
                    <Edit2 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => handleDelete(entry)}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              )}
              {entry.source === 'activity' && (
                <span className="text-xs text-gray-500">
                  Edit in EC Tracker
                </span>
              )}
            </div>
            <p className="text-gray-700 leading-relaxed">{entry.content}</p>
          </div>
        ))}
      </div>
      
      {allEntries.length === 0 && (
        <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-200 text-center text-gray-500">
          No journal entries yet. Add activities and create journal entries, or write general reflections!
        </div>
      )}
    </div>
  );
};

const TimelinePlanner = () => {
  const timeline = appData.timeline;
  const sortedTimeline = timeline.sort((a, b) => new Date(a.date) - new Date(b.date));

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Timeline Planner</h2>
          <p className="text-gray-600">Plan your premed milestones</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Total Milestones</p>
          <p className="text-3xl font-bold text-indigo-600">{timeline.length}</p>
        </div>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
        <div className="space-y-6">
          {sortedTimeline.map((event, index) => (
            <div key={event.id} className="flex items-start space-x-4">
              <div className="flex flex-col items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  event.completed ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  {event.completed ? <CheckCircle className="w-5 h-5" /> : <AlertCircle className="w-5 h-5" />}
                </div>
                {index < sortedTimeline.length - 1 && (
                  <div className="w-px h-16 bg-gray-300 mt-2"></div>
                )}
              </div>
              <div className="flex-1 pb-8">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h3 className={`font-semibold ${event.completed ? 'text-green-700' : 'text-gray-800'}`}>
                      {event.title}
                    </h3>
                    <p className="text-sm text-gray-600">{new Date(event.date).toLocaleDateString()}</p>
                  </div>
                </div>
                <p className={`text-sm ${event.completed ? 'text-green-600' : 'text-gray-600'}`}>
                  {event.description}
                </p>
              </div>
            </div>
          ))}
        </div>
        
        {timeline.length === 0 && (
          <div className="p-8 text-center text-gray-500">
            No milestones added yet. Start planning your journey!
          </div>
        )}
      </div>
    </div>
  );
};

export default PremedHQ;
